\hypertarget{functions_8c}{}\doxysection{functions.\+c File Reference}
\label{functions_8c}\index{functions.c@{functions.c}}
{\ttfamily \#include $<$stdlib.\+h$>$}\newline
{\ttfamily \#include $<$stdio.\+h$>$}\newline
{\ttfamily \#include $<$string.\+h$>$}\newline
{\ttfamily \#include $<$time.\+h$>$}\newline
{\ttfamily \#include $<$unistd.\+h$>$}\newline
{\ttfamily \#include \char`\"{}functions.\+h\char`\"{}}\newline
Include dependency graph for functions.\+c\+:
% FIG 0
\doxysubsection*{Functions}
\begin{DoxyCompactItemize}
\item 
\mbox{\hyperlink{functions_8h_a3c10129367cfae8f208778364a6a928e}{Board}} $\ast$ \mbox{\hyperlink{functions_8c_a52d50c149f41317d47d25a8f8f78b275}{init\+Board}} (int size)
\begin{DoxyCompactList}\small\item\em Function to initialize a {\bfseries{board}} of game. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{functions_8c_a9dc26f46286982340aefcc77e5b8e376}{free\+Board}} (\mbox{\hyperlink{functions_8h_a3c10129367cfae8f208778364a6a928e}{Board}} $\ast$\mbox{\hyperlink{structboard}{board}})
\begin{DoxyCompactList}\small\item\em Function to free memory allocated to a board. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{functions_8c_acf216df668455c1735c5fcdee1a0f537}{print\+Board}} (\mbox{\hyperlink{functions_8h_a25fa88d8fd72fce4763106b5bfdc6c43}{Game}} $\ast$\mbox{\hyperlink{structgame}{game}}, int player)
\begin{DoxyCompactList}\small\item\em Function to print the board. \end{DoxyCompactList}\item 
\mbox{\hyperlink{functions_8h_a33bc35bd542701fe9b4250c6b052b772}{Boat}} $\ast$ \mbox{\hyperlink{functions_8c_ae661f1bcfe2fb8a112d1cfd43647d0ac}{create\+Boat}} (\mbox{\hyperlink{functions_8h_a3c10129367cfae8f208778364a6a928e}{Board}} $\ast$player\+Board, int boat\+Number)
\begin{DoxyCompactList}\small\item\em Function to create a boat. \end{DoxyCompactList}\item 
int \mbox{\hyperlink{functions_8c_adb27847acb8934d437800d45abde6069}{is\+Boat\+Alive}} (\mbox{\hyperlink{functions_8h_a33bc35bd542701fe9b4250c6b052b772}{Boat}} $\ast$\mbox{\hyperlink{structboat}{boat}})
\begin{DoxyCompactList}\small\item\em Function to verify if a boat is still alive. \end{DoxyCompactList}\item 
\mbox{\hyperlink{functions_8h_a25fa88d8fd72fce4763106b5bfdc6c43}{Game}} $\ast$ \mbox{\hyperlink{functions_8c_a2d84339d9e37292abe167f6565717ea4}{create\+Game}} (\mbox{\hyperlink{functions_8h_af6f366fb1e7740079c3795740bc7bd08}{Game\+Type}} \mbox{\hyperlink{functions_8h_acd15dc44a0ae0d5b2d9488aae8b27df3}{game\+Type}})
\begin{DoxyCompactList}\small\item\em Function to create a new game. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{functions_8c_a491341d547ffabcf60d3f41f3624c9e2}{free\+Game}} (\mbox{\hyperlink{functions_8h_a25fa88d8fd72fce4763106b5bfdc6c43}{Game}} $\ast$\mbox{\hyperlink{structgame}{game}})
\begin{DoxyCompactList}\small\item\em Function to free memory allocated to a game. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{functions_8c_a2f24571888f7060f5df2d1190663fde8}{print\+Boats}} (\mbox{\hyperlink{functions_8h_a25fa88d8fd72fce4763106b5bfdc6c43}{Game}} $\ast$\mbox{\hyperlink{structgame}{game}}, int player)
\begin{DoxyCompactList}\small\item\em Function to print the boats of a player. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{functions_8c_a87e6b0c533cd6f9c78e6e95a56c7562d}{show\+POV}} (\mbox{\hyperlink{functions_8h_a25fa88d8fd72fce4763106b5bfdc6c43}{Game}} $\ast$\mbox{\hyperlink{structgame}{game}}, int player)
\begin{DoxyCompactList}\small\item\em Function to show the POV of the player \+: {\bfseries{player board + shot board}} \end{DoxyCompactList}\item 
int \mbox{\hyperlink{functions_8c_a3cdb07d6db0d990dafaecd71f04ac97a}{turn}} (\mbox{\hyperlink{functions_8h_a25fa88d8fd72fce4763106b5bfdc6c43}{Game}} $\ast$\mbox{\hyperlink{structgame}{game}}, int player, \mbox{\hyperlink{functions_8h_af6f366fb1e7740079c3795740bc7bd08}{Game\+Type}} \mbox{\hyperlink{functions_8h_acd15dc44a0ae0d5b2d9488aae8b27df3}{game\+Type}})
\begin{DoxyCompactList}\small\item\em Function to sequence the turn of the players. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{functions_8c_ae3e2a943202e805e4e4519eee29a5d15}{shoot}} (int x, int y, \mbox{\hyperlink{functions_8h_a3c10129367cfae8f208778364a6a928e}{Board}} $\ast$player\+Board, \mbox{\hyperlink{functions_8h_a3c10129367cfae8f208778364a6a928e}{Board}} $\ast$opponent\+Board, \mbox{\hyperlink{functions_8h_a33bc35bd542701fe9b4250c6b052b772}{Boat}} $\ast$opponent\+Boats)
\begin{DoxyCompactList}\small\item\em Function to simulate a shot on the other board. \end{DoxyCompactList}\item 
int \mbox{\hyperlink{functions_8c_a68c47bf4770c750d376111c208b36b89}{check\+Winner}} (\mbox{\hyperlink{functions_8h_a25fa88d8fd72fce4763106b5bfdc6c43}{Game}} $\ast$\mbox{\hyperlink{structgame}{game}}, int player)
\begin{DoxyCompactList}\small\item\em Function to verify if there is a winner. \end{DoxyCompactList}\end{DoxyCompactItemize}


\doxysubsection{Detailed Description}
\begin{DoxyAuthor}{Author}
Cl√©ment DURECU 
\end{DoxyAuthor}


\doxysubsection{Function Documentation}
\mbox{\Hypertarget{functions_8c_a68c47bf4770c750d376111c208b36b89}\label{functions_8c_a68c47bf4770c750d376111c208b36b89}} 
\index{functions.c@{functions.c}!checkWinner@{checkWinner}}
\index{checkWinner@{checkWinner}!functions.c@{functions.c}}
\doxysubsubsection{\texorpdfstring{checkWinner()}{checkWinner()}}
{\footnotesize\ttfamily int check\+Winner (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{functions_8h_a25fa88d8fd72fce4763106b5bfdc6c43}{Game}} $\ast$}]{game,  }\item[{int}]{player }\end{DoxyParamCaption})}



Function to verify if there is a winner. 


\begin{DoxyParams}[1]{Parameters}
\mbox{\texttt{ in}}  & {\em game} & the game we are currently playing \\
\hline
\mbox{\texttt{ in}}  & {\em player} & the player we want to check if he is a winner \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
1 if there is a winner, else 0 
\end{DoxyReturn}
\mbox{\Hypertarget{functions_8c_ae661f1bcfe2fb8a112d1cfd43647d0ac}\label{functions_8c_ae661f1bcfe2fb8a112d1cfd43647d0ac}} 
\index{functions.c@{functions.c}!createBoat@{createBoat}}
\index{createBoat@{createBoat}!functions.c@{functions.c}}
\doxysubsubsection{\texorpdfstring{createBoat()}{createBoat()}}
{\footnotesize\ttfamily \mbox{\hyperlink{functions_8h_a33bc35bd542701fe9b4250c6b052b772}{Boat}}$\ast$ create\+Boat (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{functions_8h_a3c10129367cfae8f208778364a6a928e}{Board}} $\ast$}]{player\+Board,  }\item[{int}]{boat\+Number }\end{DoxyParamCaption})}



Function to create a boat. 


\begin{DoxyParams}[1]{Parameters}
\mbox{\texttt{ in}}  & {\em player\+Board} & the board of the player we want to create a boat on \\
\hline
\mbox{\texttt{ in}}  & {\em boat\+Number} & the number of boats per player \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
The boat we created 
\end{DoxyReturn}
\mbox{\Hypertarget{functions_8c_a2d84339d9e37292abe167f6565717ea4}\label{functions_8c_a2d84339d9e37292abe167f6565717ea4}} 
\index{functions.c@{functions.c}!createGame@{createGame}}
\index{createGame@{createGame}!functions.c@{functions.c}}
\doxysubsubsection{\texorpdfstring{createGame()}{createGame()}}
{\footnotesize\ttfamily \mbox{\hyperlink{functions_8h_a25fa88d8fd72fce4763106b5bfdc6c43}{Game}}$\ast$ create\+Game (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{functions_8h_af6f366fb1e7740079c3795740bc7bd08}{Game\+Type}}}]{game\+Type }\end{DoxyParamCaption})}



Function to create a new game. 


\begin{DoxyParams}[1]{Parameters}
\mbox{\texttt{ in}}  & {\em game\+Type} & the type of game \+: {\bfseries{player mode, normal bot mode or hardcore bot mode}} \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
The game we created 
\end{DoxyReturn}
\mbox{\Hypertarget{functions_8c_a9dc26f46286982340aefcc77e5b8e376}\label{functions_8c_a9dc26f46286982340aefcc77e5b8e376}} 
\index{functions.c@{functions.c}!freeBoard@{freeBoard}}
\index{freeBoard@{freeBoard}!functions.c@{functions.c}}
\doxysubsubsection{\texorpdfstring{freeBoard()}{freeBoard()}}
{\footnotesize\ttfamily void free\+Board (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{functions_8h_a3c10129367cfae8f208778364a6a928e}{Board}} $\ast$}]{board }\end{DoxyParamCaption})}



Function to free memory allocated to a board. 


\begin{DoxyParams}[1]{Parameters}
\mbox{\texttt{ in}}  & {\em board} & the board we want to free memory from \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
void 
\end{DoxyReturn}
\mbox{\Hypertarget{functions_8c_a491341d547ffabcf60d3f41f3624c9e2}\label{functions_8c_a491341d547ffabcf60d3f41f3624c9e2}} 
\index{functions.c@{functions.c}!freeGame@{freeGame}}
\index{freeGame@{freeGame}!functions.c@{functions.c}}
\doxysubsubsection{\texorpdfstring{freeGame()}{freeGame()}}
{\footnotesize\ttfamily void free\+Game (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{functions_8h_a25fa88d8fd72fce4763106b5bfdc6c43}{Game}} $\ast$}]{game }\end{DoxyParamCaption})}



Function to free memory allocated to a game. 


\begin{DoxyParams}[1]{Parameters}
\mbox{\texttt{ in}}  & {\em game} & the game we want to free memory allocated to \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
void 
\end{DoxyReturn}
\mbox{\Hypertarget{functions_8c_a52d50c149f41317d47d25a8f8f78b275}\label{functions_8c_a52d50c149f41317d47d25a8f8f78b275}} 
\index{functions.c@{functions.c}!initBoard@{initBoard}}
\index{initBoard@{initBoard}!functions.c@{functions.c}}
\doxysubsubsection{\texorpdfstring{initBoard()}{initBoard()}}
{\footnotesize\ttfamily \mbox{\hyperlink{functions_8h_a3c10129367cfae8f208778364a6a928e}{Board}}$\ast$ init\+Board (\begin{DoxyParamCaption}\item[{int}]{size }\end{DoxyParamCaption})}



Function to initialize a {\bfseries{board}} of game. 


\begin{DoxyParams}[1]{Parameters}
\mbox{\texttt{ in}}  & {\em size} & the {\bfseries{size}} of the board \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
The board we initialized 
\end{DoxyReturn}
\mbox{\Hypertarget{functions_8c_adb27847acb8934d437800d45abde6069}\label{functions_8c_adb27847acb8934d437800d45abde6069}} 
\index{functions.c@{functions.c}!isBoatAlive@{isBoatAlive}}
\index{isBoatAlive@{isBoatAlive}!functions.c@{functions.c}}
\doxysubsubsection{\texorpdfstring{isBoatAlive()}{isBoatAlive()}}
{\footnotesize\ttfamily int is\+Boat\+Alive (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{functions_8h_a33bc35bd542701fe9b4250c6b052b772}{Boat}} $\ast$}]{boat }\end{DoxyParamCaption})}



Function to verify if a boat is still alive. 


\begin{DoxyParams}[1]{Parameters}
\mbox{\texttt{ in}}  & {\em boat} & the boat we want to check life status \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
1 if the size of the boat is $>$ 0, else 0 
\end{DoxyReturn}
\mbox{\Hypertarget{functions_8c_acf216df668455c1735c5fcdee1a0f537}\label{functions_8c_acf216df668455c1735c5fcdee1a0f537}} 
\index{functions.c@{functions.c}!printBoard@{printBoard}}
\index{printBoard@{printBoard}!functions.c@{functions.c}}
\doxysubsubsection{\texorpdfstring{printBoard()}{printBoard()}}
{\footnotesize\ttfamily void print\+Board (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{functions_8h_a25fa88d8fd72fce4763106b5bfdc6c43}{Game}} $\ast$}]{game,  }\item[{int}]{player }\end{DoxyParamCaption})}



Function to print the board. 


\begin{DoxyParams}[1]{Parameters}
\mbox{\texttt{ in}}  & {\em game} & the game we are currently playing \\
\hline
\mbox{\texttt{ in}}  & {\em player} & the player we want to print the board of \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
void 
\end{DoxyReturn}
\mbox{\Hypertarget{functions_8c_a2f24571888f7060f5df2d1190663fde8}\label{functions_8c_a2f24571888f7060f5df2d1190663fde8}} 
\index{functions.c@{functions.c}!printBoats@{printBoats}}
\index{printBoats@{printBoats}!functions.c@{functions.c}}
\doxysubsubsection{\texorpdfstring{printBoats()}{printBoats()}}
{\footnotesize\ttfamily void print\+Boats (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{functions_8h_a25fa88d8fd72fce4763106b5bfdc6c43}{Game}} $\ast$}]{game,  }\item[{int}]{player }\end{DoxyParamCaption})}



Function to print the boats of a player. 


\begin{DoxyParams}[1]{Parameters}
\mbox{\texttt{ in}}  & {\em game} & the game we are currently playing \\
\hline
\mbox{\texttt{ in}}  & {\em player} & the player we want to print the boats of \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
void 
\end{DoxyReturn}
\mbox{\Hypertarget{functions_8c_ae3e2a943202e805e4e4519eee29a5d15}\label{functions_8c_ae3e2a943202e805e4e4519eee29a5d15}} 
\index{functions.c@{functions.c}!shoot@{shoot}}
\index{shoot@{shoot}!functions.c@{functions.c}}
\doxysubsubsection{\texorpdfstring{shoot()}{shoot()}}
{\footnotesize\ttfamily void shoot (\begin{DoxyParamCaption}\item[{int}]{x,  }\item[{int}]{y,  }\item[{\mbox{\hyperlink{functions_8h_a3c10129367cfae8f208778364a6a928e}{Board}} $\ast$}]{player\+Board,  }\item[{\mbox{\hyperlink{functions_8h_a3c10129367cfae8f208778364a6a928e}{Board}} $\ast$}]{opponent\+Board,  }\item[{\mbox{\hyperlink{functions_8h_a33bc35bd542701fe9b4250c6b052b772}{Boat}} $\ast$}]{opponent\+Boats }\end{DoxyParamCaption})}



Function to simulate a shot on the other board. 


\begin{DoxyParams}[1]{Parameters}
\mbox{\texttt{ in}}  & {\em x} & the reference position in x \\
\hline
\mbox{\texttt{ in}}  & {\em y} & the reference position in y \\
\hline
\mbox{\texttt{ in}}  & {\em player\+Board} & the board of the player who shots \\
\hline
\mbox{\texttt{ in}}  & {\em opponent\+Board} & the board of the player who gets shot \\
\hline
\mbox{\texttt{ in}}  & {\em opponent\+Boats} & the position of the opponent boats \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
void 
\end{DoxyReturn}
\mbox{\Hypertarget{functions_8c_a87e6b0c533cd6f9c78e6e95a56c7562d}\label{functions_8c_a87e6b0c533cd6f9c78e6e95a56c7562d}} 
\index{functions.c@{functions.c}!showPOV@{showPOV}}
\index{showPOV@{showPOV}!functions.c@{functions.c}}
\doxysubsubsection{\texorpdfstring{showPOV()}{showPOV()}}
{\footnotesize\ttfamily void show\+POV (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{functions_8h_a25fa88d8fd72fce4763106b5bfdc6c43}{Game}} $\ast$}]{game,  }\item[{int}]{player }\end{DoxyParamCaption})}



Function to show the POV of the player \+: {\bfseries{player board + shot board}} 


\begin{DoxyParams}[1]{Parameters}
\mbox{\texttt{ in}}  & {\em game} & the game we are currently playing \\
\hline
\mbox{\texttt{ in}}  & {\em player} & the player we want to show the POV of \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
void 
\end{DoxyReturn}
\mbox{\Hypertarget{functions_8c_a3cdb07d6db0d990dafaecd71f04ac97a}\label{functions_8c_a3cdb07d6db0d990dafaecd71f04ac97a}} 
\index{functions.c@{functions.c}!turn@{turn}}
\index{turn@{turn}!functions.c@{functions.c}}
\doxysubsubsection{\texorpdfstring{turn()}{turn()}}
{\footnotesize\ttfamily int turn (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{functions_8h_a25fa88d8fd72fce4763106b5bfdc6c43}{Game}} $\ast$}]{game,  }\item[{int}]{player,  }\item[{\mbox{\hyperlink{functions_8h_af6f366fb1e7740079c3795740bc7bd08}{Game\+Type}}}]{game\+Type }\end{DoxyParamCaption})}



Function to sequence the turn of the players. 


\begin{DoxyParams}[1]{Parameters}
\mbox{\texttt{ in}}  & {\em game} & the game we are currently playing \\
\hline
\mbox{\texttt{ in}}  & {\em player} & the player we want to sequence the turn of \\
\hline
\mbox{\texttt{ in}}  & {\em game\+Type} & the type of game \+: {\bfseries{player mode, normal bot mode or hardcore bot mode}} \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
0 if no error 
\end{DoxyReturn}
